datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  STUDENT
  CLASS_TEACHER
  HOD
  SECURITY
  ADMIN
}

enum OutpassType {
  CASUAL
  EMERGENCY
  GROUP
}

enum OutpassStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ReportType {
  MISBEHAVIOR
  LATE_RETURN
  FAKE_PASS
  OTHER
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role

  // Relations
  student   Student?
  teacher   ClassTeacher?
  hod       HOD?
  security  Security?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id          String   @id @default(cuid())
  rollNo      String   @unique
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  
  parent      Parent?
  outpasses   Outpass[]
  reports     Report[]
  blocked     Boolean  @default(false) // if blocked by class teacher

  classTeacherId String?
  classTeacher   ClassTeacher? @relation(fields: [classTeacherId], references: [id])
}

model Parent {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique
  studentId String   @unique
  student   Student  @relation(fields: [studentId], references: [id])
}

model ClassTeacher {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  
  students  Student[]
  approvals Outpass[] @relation("TeacherApproval")
}

model HOD {
  id         String   @id @default(cuid())
  department String
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])

  approvals  Outpass[]
}

model Security {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  reports   Report[]
}

model Outpass {
  id            String        @id @default(cuid())
  type          OutpassType
  reason        String
  status        OutpassStatus @default(PENDING)

  studentId     String
  student       Student       @relation(fields: [studentId], references: [id])

  approvedByTeacherId String?
  teacher            ClassTeacher? @relation("TeacherApproval", fields: [approvedByTeacherId], references: [id])

  approvedByHodId String?
  hod             HOD? @relation(fields: [approvedByHodId], references: [id])

  issuedAt     DateTime? 
  expiresAt    DateTime?
  qrCode       String? // QR/OTP string

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Report {
  id          String      @id @default(cuid())
  type        ReportType
  description String

  studentId   String
  student     Student     @relation(fields: [studentId], references: [id])

  securityId  String
  security    Security    @relation(fields: [securityId], references: [id])

  createdAt   DateTime @default(now())
}
