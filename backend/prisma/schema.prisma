datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_BY5A6PcIqipo@ep-crimson-thunder-addxrs53-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
}

generator client {
  provider = "prisma-client-js"
}

//
// Enums
//
enum UserRole {
  STUDENT
  TEACHER
  HOD
  ADMIN
}

enum OutpassType {
  CASUAL
  EMERGENCY
  GROUP
}

enum OutpassStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  EXITED
  REENTERED
  MOVED
  EXPIRED
}

//
// Models
//
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  role        UserRole
  name        String
  rollNumber  String?
  branch      String?
  department  String?
  parentPhone String?

  studentProfile StudentProfile?
  teacherProfile TeacherProfile?
  hodProfile     HODProfile?
  adminProfile   AdminProfile?

  teacherApprovals  OutpassRequest[] @relation("TeacherApprovals")
  hodApprovals      OutpassRequest[] @relation("HODApprovals")
  securityExits     OutpassRequest[] @relation("SecurityExits")
  securityReentries OutpassRequest[] @relation("SecurityReentries")

  incidentReports   IncidentReport[] // reportedBy
}

model StudentProfile {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique

  // class teacher = TeacherProfile
  classTeacher   TeacherProfile?  @relation("ClassTeacherStudents", fields: [classTeacherId], references: [id])
  classTeacherId String?

  // hod = HODProfile
  hod            HODProfile?      @relation("HODStudents", fields: [hodId], references: [id])
  hodId          String?

  outpasses      OutpassRequest[] @relation("OutpassStudent")
  groupOutpasses OutpassRequest[] @relation("OutpassGroupMembers")

  notes          Note[]
}

model TeacherProfile {
  id         String           @id @default(cuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @unique

  students   StudentProfile[] @relation("ClassTeacherStudents")
  department String
  notes      Note[]
}

model HODProfile {
  id         String           @id @default(cuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String           @unique

  students   StudentProfile[] @relation("HODStudents")
  department String
}

model AdminProfile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model OutpassRequest {
  id            String           @id @default(cuid())
  student       StudentProfile   @relation("OutpassStudent", fields: [studentId], references: [id])
  studentId     String
  groupMembers  StudentProfile[] @relation("OutpassGroupMembers")

  type          OutpassType
  status        OutpassStatus
  reason        String
  outpassDate   DateTime         @default(now()) // Date for which outpass is requested (must be today)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  approvedByTeacherId String?
  approvedByTeacher   User?   @relation("TeacherApprovals", fields: [approvedByTeacherId], references: [id])

  approvedByHodId     String?
  approvedByHod       User?   @relation("HODApprovals", fields: [approvedByHodId], references: [id])

  qrCode         String?
  otp            String?
  otpExpiresAt   DateTime?        // OTP expires 5 hours after generation
  validUntil     DateTime?        // Overall outpass validity (end of outpass date)

  exitMarkedById    String?
  exitMarkedBy      User?   @relation("SecurityExits", fields: [exitMarkedById], references: [id])

  reentryMarkedById String?
  reentryMarkedBy   User?   @relation("SecurityReentries", fields: [reentryMarkedById], references: [id])

  incidentReports   IncidentReport[]
}

model Note {
  id        String          @id @default(cuid())
  teacher   TeacherProfile  @relation(fields: [teacherId], references: [id])
  teacherId String
  student   StudentProfile  @relation(fields: [studentId], references: [id])
  studentId String
  content   String
  createdAt DateTime        @default(now())
  private   Boolean         @default(true)
}

model IncidentReport {
  id          String         @id @default(cuid())
  outpass     OutpassRequest @relation(fields: [outpassId], references: [id])
  outpassId   String
  reportedBy  User           @relation(fields: [reportedById], references: [id])
  reportedById String
  description String
  createdAt   DateTime       @default(now())
  type        String
}

model allowedStudentEmail {
  id    String @id @default(cuid())
  email String @unique
}